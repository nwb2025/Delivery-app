// Generated by view binder compiler. Do not edit!
package com.rec.uber.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.gms.maps.MapView;
import com.rec.uber.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemHistoryBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  @NonNull
  public final TextView car;

  @NonNull
  public final LinearLayout cardLayout;

  @NonNull
  public final CardView cardView;

  @NonNull
  public final LinearLayout layout;

  @NonNull
  public final MapView map;

  @NonNull
  public final View maskLayout;

  @NonNull
  public final TextView price;

  @NonNull
  public final TextView rideId;

  @NonNull
  public final TextView time;

  private ItemHistoryBinding(@NonNull FrameLayout rootView, @NonNull TextView car,
      @NonNull LinearLayout cardLayout, @NonNull CardView cardView, @NonNull LinearLayout layout,
      @NonNull MapView map, @NonNull View maskLayout, @NonNull TextView price,
      @NonNull TextView rideId, @NonNull TextView time) {
    this.rootView = rootView;
    this.car = car;
    this.cardLayout = cardLayout;
    this.cardView = cardView;
    this.layout = layout;
    this.map = map;
    this.maskLayout = maskLayout;
    this.price = price;
    this.rideId = rideId;
    this.time = time;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.car;
      TextView car = ViewBindings.findChildViewById(rootView, id);
      if (car == null) {
        break missingId;
      }

      id = R.id.card_layout;
      LinearLayout cardLayout = ViewBindings.findChildViewById(rootView, id);
      if (cardLayout == null) {
        break missingId;
      }

      id = R.id.card_view;
      CardView cardView = ViewBindings.findChildViewById(rootView, id);
      if (cardView == null) {
        break missingId;
      }

      id = R.id.layout;
      LinearLayout layout = ViewBindings.findChildViewById(rootView, id);
      if (layout == null) {
        break missingId;
      }

      id = R.id.map;
      MapView map = ViewBindings.findChildViewById(rootView, id);
      if (map == null) {
        break missingId;
      }

      id = R.id.mask_layout;
      View maskLayout = ViewBindings.findChildViewById(rootView, id);
      if (maskLayout == null) {
        break missingId;
      }

      id = R.id.price;
      TextView price = ViewBindings.findChildViewById(rootView, id);
      if (price == null) {
        break missingId;
      }

      id = R.id.rideId;
      TextView rideId = ViewBindings.findChildViewById(rootView, id);
      if (rideId == null) {
        break missingId;
      }

      id = R.id.time;
      TextView time = ViewBindings.findChildViewById(rootView, id);
      if (time == null) {
        break missingId;
      }

      return new ItemHistoryBinding((FrameLayout) rootView, car, cardLayout, cardView, layout, map,
          maskLayout, price, rideId, time);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
